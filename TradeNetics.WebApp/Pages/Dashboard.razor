@page "/"
@page "/dashboard"
@using TradeNetics.WebApp.Data
@inject IConfigurationService ConfigurationService
@inject TradingBotStatusService StatusService
@inject MockCryptoDataService MockCryptoDataService
@inject RealCryptoDataService RealCryptoDataService
@implements IDisposable

<PageTitle>TradeNetics Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-primary mb-3">
                <i class="oi oi-graph"></i> TradeNetics Dashboard
            </h1>
            <p class="lead text-muted">AI-Powered Cryptocurrency Trading Bot</p>
            @if (!string.IsNullOrEmpty(_configuration.ApiKey) && !string.IsNullOrEmpty(_configuration.ApiSecret))
            {
                <div class="alert alert-success alert-sm">
                    <i class="oi oi-check"></i> Connected to Binance API - Showing real data
                </div>
            }
            else
            {
                <div class="alert alert-warning alert-sm">
                    <i class="oi oi-warning"></i> API credentials not configured - Showing demo data. <a href="/configuration">Configure API keys</a>
                </div>
            }
        </div>
    </div>

    <!-- Status Cards Row -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Bot Status</h6>
                            <h4 class="mb-0 @(_botStatus?.IsRunning == true ? "text-success" : "text-danger")">
                                @(_botStatus?.IsRunning == true ? "Running" : "Stopped")
                            </h4>
                        </div>
                        <div class="display-6 @(_botStatus?.IsRunning == true ? "text-success" : "text-danger")">
                            <i class="oi @(_botStatus?.IsRunning == true ? "oi-play-circle" : "oi-media-stop")"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Portfolio Value</h6>
                            <h4 class="mb-0 text-success">$@_totalPortfolioValue.ToString("F2")</h4>
                        </div>
                        <div class="display-6 text-success">
                            <i class="oi oi-dollar"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Active Pairs</h6>
                            <h4 class="mb-0 text-info">@_activePairs.Count</h4>
                        </div>
                        <div class="display-6 text-info">
                            <i class="oi oi-layers"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Today's P&L</h6>
                            <h4 class="mb-0 @(_dailyPnL >= 0 ? "text-success" : "text-danger")">
                                @(_dailyPnL >= 0 ? "+" : "")@_dailyPnL.ToString("F2")%
                            </h4>
                        </div>
                        <div class="display-6 @(_dailyPnL >= 0 ? "text-success" : "text-danger")">
                            <i class="oi @(_dailyPnL >= 0 ? "oi-arrow-top" : "oi-arrow-bottom")"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Bot Controls -->
        <div class="col-md-4 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="oi oi-cog"></i> Bot Controls</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn @(_botStatus?.IsRunning == true ? "btn-danger" : "btn-success") btn-lg" 
                                @onclick="ToggleBotStatus" disabled="@_isTogglingBot">
                            @if (_isTogglingBot)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="oi @(_botStatus?.IsRunning == true ? "oi-media-stop" : "oi-play-circle")"></i>
                            @(_botStatus?.IsRunning == true ? "Stop Trading Bot" : "Start Trading Bot")
                        </button>
                        
                        <button class="btn btn-outline-warning" @onclick="RestartBot" disabled="@_isTogglingBot">
                            <i class="oi oi-reload"></i> Restart Bot
                        </button>
                    </div>

                    <hr />

                    <h6 class="text-muted mb-3">Quick Settings</h6>
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="paperTradingSwitch" 
                               checked="@_configuration.PaperTradingMode" 
                               @onchange="@((ChangeEventArgs e) => OnPaperTradingChanged(e))">
                        <label class="form-check-label" for="paperTradingSwitch">
                            Paper Trading Mode
                        </label>
                    </div>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="tradingEnabledSwitch" 
                               checked="@_configuration.TradingEnabled" 
                               @onchange="@((ChangeEventArgs e) => OnTradingEnabledChanged(e))">
                        <label class="form-check-label" for="tradingEnabledSwitch">
                            Trading Enabled
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Portfolio Overview -->
        <div class="col-md-8 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="oi oi-pie-chart"></i> Portfolio Overview</h5>
                </div>
                <div class="card-body">
                    @if (_portfolioHoldings.Any())
                    {
                        <div class="row">
                            <div class="col-md-8">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Asset</th>
                                                <th>Holdings</th>
                                                <th>Value (USD)</th>
                                                <th>Allocation</th>
                                                <th>24h Change</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var holding in _portfolioHoldings)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <div class="crypto-icon me-2">
                                                                <i class="oi oi-dollar text-warning"></i>
                                                            </div>
                                                            <div>
                                                                <strong>@holding.Symbol</strong>
                                                                <br />
                                                                <small class="text-muted">@holding.Name</small>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <strong>@holding.Amount.ToString("F6")</strong>
                                                    </td>
                                                    <td>
                                                        <strong>$@holding.UsdValue.ToString("F2")</strong>
                                                        <br />
                                                        <small class="text-muted">@holding.Price.ToString("F4") USD</small>
                                                    </td>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <div class="progress me-2" style="width: 60px; height: 8px;">
                                                                <div class="progress-bar bg-primary" 
                                                                     style="width: @holding.AllocationPercentage%"></div>
                                                            </div>
                                                            <span class="small">@holding.AllocationPercentage.ToString("F1")%</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="@(holding.Change24h >= 0 ? "text-success" : "text-danger")">
                                                            @(holding.Change24h >= 0 ? "+" : "")@holding.Change24h.ToString("F2")%
                                                        </span>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h6 class="text-muted mb-3">Portfolio Distribution</h6>
                                <!-- Simple CSS-based pie chart representation -->
                                <div class="portfolio-chart">
                                    @foreach (var holding in _portfolioHoldings.Take(4))
                                    {
                                        <div class="chart-item mb-2">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div class="d-flex align-items-center">
                                                    <div class="chart-color me-2" style="background-color: @GetChartColor(holding.Symbol);"></div>
                                                    <span class="small">@holding.Symbol</span>
                                                </div>
                                                <span class="small fw-bold">@holding.AllocationPercentage.ToString("F1")%</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <div class="display-6 text-muted mb-3">
                                <i class="oi oi-info"></i>
                            </div>
                            @if (!string.IsNullOrEmpty(_configuration.ApiKey) && !string.IsNullOrEmpty(_configuration.ApiSecret))
                            {
                                <h5 class="text-muted">Portfolio data unavailable</h5>
                                <p class="text-muted">Unable to retrieve portfolio information from the API at this time</p>
                            }
                            else
                            {
                                <h5 class="text-muted">No holdings found</h5>
                                <p class="text-muted">Start trading to build your portfolio</p>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="oi oi-graph"></i> Portfolio Performance (7 Days)</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        @if (_portfolioHoldings.Any())
                        {
                            <!-- Dynamic Portfolio Performance Chart -->
                            <svg width="100%" height="200" viewBox="0 0 400 200">
                                <defs>
                                    <linearGradient id="portfolioGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                                        <stop offset="0%" style="stop-color:#17a2b8;stop-opacity:0.3" />
                                        <stop offset="100%" style="stop-color:#17a2b8;stop-opacity:0" />
                                    </linearGradient>
                                </defs>
                                <!-- Chart background -->
                                <rect width="400" height="200" fill="none" stroke="#e9ecef" stroke-width="1"/>
                                <!-- Grid lines -->
                                <line x1="0" y1="50" x2="400" y2="50" stroke="#f8f9fa" stroke-width="1"/>
                                <line x1="0" y1="100" x2="400" y2="100" stroke="#f8f9fa" stroke-width="1"/>
                                <line x1="0" y1="150" x2="400" y2="150" stroke="#f8f9fa" stroke-width="1"/>
                                <!-- Dynamic portfolio line based on daily changes -->
                                @{
                                    var avgChange = _portfolioHoldings.Average(h => h.Change24h);
                                    var baseY = 150;
                                    var changeRange = 50;
                                    var points = new List<string>();
                                    
                                    for (int i = 0; i < 8; i++)
                                    {
                                        var x = i * 57;
                                        var variation = (double)(avgChange * (decimal)(0.7 + (i * 0.05))); // Simulate week progression
                                        var y = baseY - (variation * changeRange / 10); // Scale change to pixels
                                        y = Math.Max(20, Math.Min(180, y)); // Keep within bounds
                                        points.Add($"{x},{y:F0}");
                                    }
                                    var pointsString = string.Join(" ", points);
                                }
                                <polyline fill="url(#portfolioGradient)" stroke="#17a2b8" stroke-width="2" points="@pointsString"/>
                                <polyline fill="none" stroke="#17a2b8" stroke-width="2" points="@pointsString"/>
                                <!-- Value labels -->
                                <text x="10" y="15" font-size="12" fill="#6c757d">$@((_totalPortfolioValue * 0.95m).ToString("F0"))</text>
                                <text x="350" y="15" font-size="12" fill="#6c757d">$@(_totalPortfolioValue.ToString("F0"))</text>
                            </svg>
                        }
                        else
                        {
                            <!-- Static chart when no data -->
                            <svg width="100%" height="200" viewBox="0 0 400 200">
                                <rect width="400" height="200" fill="#f8f9fa" stroke="#e9ecef" stroke-width="1"/>
                                <text x="200" y="100" text-anchor="middle" font-size="14" fill="#6c757d">No portfolio data available</text>
                            </svg>
                        }
                        <div class="chart-labels mt-2">
                            <small class="text-muted">Portfolio performance based on 24h changes</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0"><i class="oi oi-bar-chart"></i> Trading Activity (24h)</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        @if (_portfolioHoldings.Any())
                        {
                            <!-- Dynamic Trading Activity Chart -->
                            <svg width="100%" height="200" viewBox="0 0 400 200">
                                <!-- Chart background -->
                                <rect width="400" height="200" fill="none" stroke="#e9ecef" stroke-width="1"/>
                                <!-- Dynamic bars based on portfolio activity -->
                                @{
                                    var random = new Random(DateTime.Now.Day); // Seed for consistent daily pattern
                                    var baseY = 200;
                                    var maxHeight = 120;
                                }
                                @for (int i = 0; i < 6; i++)
                                {
                                    var x = 20 + (i * 60);
                                    var width = 40;
                                    var isBuy = (i + _portfolioHoldings.Count) % 2 == 0;
                                    var heightFactor = Math.Abs((double)(_portfolioHoldings.ElementAtOrDefault(i % _portfolioHoldings.Count)?.Change24h ?? 2.5m)) / 10;
                                    var height = Math.Min(maxHeight, Math.Max(20, heightFactor * 40 + 40));
                                    var y = baseY - height;
                                    var color = isBuy ? "#28a745" : "#dc3545";
                                    
                                    <rect x="@x" y="@y" width="@width" height="@height" fill="@color" opacity="0.8"/>
                                }
                                <!-- Labels -->
                                <text x="40" y="195" text-anchor="middle" font-size="10" fill="#6c757d">4h</text>
                                <text x="100" y="195" text-anchor="middle" font-size="10" fill="#6c757d">8h</text>
                                <text x="160" y="195" text-anchor="middle" font-size="10" fill="#6c757d">12h</text>
                                <text x="220" y="195" text-anchor="middle" font-size="10" fill="#6c757d">16h</text>
                                <text x="280" y="195" text-anchor="middle" font-size="10" fill="#6c757d">20h</text>
                                <text x="340" y="195" text-anchor="middle" font-size="10" fill="#6c757d">24h</text>
                            </svg>
                        }
                        else
                        {
                            <!-- Default chart when no data -->
                            <svg width="100%" height="200" viewBox="0 0 400 200">
                                <rect width="400" height="200" fill="#f8f9fa" stroke="#e9ecef" stroke-width="1"/>
                                <text x="200" y="100" text-anchor="middle" font-size="14" fill="#6c757d">No trading data available</text>
                            </svg>
                        }
                        <div class="chart-legend mt-2">
                            <small class="text-success me-3">■ Buys</small>
                            <small class="text-danger">■ Sells</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cryptocurrency Management -->
    <div class="row">
        <div class="col-12 mb-4">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="oi oi-layers"></i> Active Trading Pairs</h5>
                    <button class="btn btn-light btn-sm" @onclick="ShowAddCryptoModal">
                        <i class="oi oi-plus"></i> Add Pair
                    </button>
                </div>
                <div class="card-body">
                    @if (_tradingPairs.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Symbol</th>
                                        <th>Status</th>
                                        <th>Current Price</th>
                                        <th>24h Change</th>
                                        <th>Position</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pair in _tradingPairs)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@pair.Symbol</strong>
                                                <br />
                                                <small class="text-muted">@pair.BaseAsset/@pair.QuoteAsset</small>
                                            </td>
                                            <td>
                                                <span class="badge @(pair.IsEnabled ? "bg-success" : "bg-secondary")">
                                                    @(pair.IsEnabled ? "Active" : "Disabled")
                                                </span>
                                            </td>
                                            <td>
                                                $@pair.CurrentPrice.ToString("F4")
                                            </td>
                                            <td>
                                                <span class="@(pair.PriceChange24h >= 0 ? "text-success" : "text-danger")">
                                                    @(pair.PriceChange24h >= 0 ? "+" : "")@pair.PriceChange24h.ToString("F2")%
                                                </span>
                                            </td>
                                            <td>
                                                @if (pair.CurrentPosition > 0)
                                                {
                                                    <span class="text-success">@pair.CurrentPosition.ToString("F6")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">None</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm @(pair.IsEnabled ? "btn-outline-warning" : "btn-outline-success")" 
                                                            @onclick="() => TogglePairStatus(pair)">
                                                        <i class="oi @(pair.IsEnabled ? "oi-media-pause" : "oi-media-play")"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemovePair(pair)">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <div class="display-6 text-muted mb-3">
                                <i class="oi oi-info"></i>
                            </div>
                            <h5 class="text-muted">No trading pairs configured</h5>
                            <p class="text-muted">Add your first trading pair to get started</p>
                            <button class="btn btn-primary" @onclick="ShowAddCryptoModal">
                                <i class="oi oi-plus"></i> Add Trading Pair
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Crypto Modal -->
@if (_showAddCryptoModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Trading Pair</h5>
                    <button type="button" class="btn-close" @onclick="HideAddCryptoModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="newCryptoSymbol" class="form-label">Trading Pair Symbol</label>
                        <input type="text" id="newCryptoSymbol" class="form-control" 
                               @bind="_newCryptoSymbol" 
                               placeholder="e.g., BTCUSDT, ETHUSDT, ADAUSDT" 
                               style="text-transform: uppercase" />
                        <div class="form-text">Enter the full trading pair symbol (e.g., BTCUSDT)</div>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="enableNewCrypto" @bind="_enableNewCrypto">
                        <label class="form-check-label" for="enableNewCrypto">
                            Enable trading for this pair immediately
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddCryptoModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddNewCrypto" disabled="@string.IsNullOrEmpty(_newCryptoSymbol)">
                        <i class="oi oi-plus"></i> Add Trading Pair
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .chart-color {
        width: 12px;
        height: 12px;
        border-radius: 2px;
    }
    
    .crypto-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border-radius: 50%;
    }
    
    .chart-container {
        position: relative;
    }
    
    .portfolio-chart .chart-item {
        font-size: 0.875rem;
    }
</style>

@code {
    private TradingConfiguration _configuration = new();
    private TradeNetics.WebApp.Data.TradingBotStatus? _botStatus;
    private List<TradingPair> _tradingPairs = new();
    private List<TradingPair> _activePairs = new();
    private List<TradeNetics.WebApp.Data.PortfolioHolding> _portfolioHoldings = new();
    private decimal _totalPortfolioValue = 12450.75m;
    private decimal _dailyPnL = 2.35m;
    private bool _isTogglingBot = false;
    private bool _showAddCryptoModal = false;
    private string _newCryptoSymbol = string.Empty;
    private bool _enableNewCrypto = true;
    private Timer? _refreshTimer;
    private bool _isLoading = true;

    public class TradingPair
    {
        public string Symbol { get; set; } = string.Empty;
        public string BaseAsset { get; set; } = string.Empty;
        public string QuoteAsset { get; set; } = string.Empty;
        public bool IsEnabled { get; set; }
        public decimal CurrentPrice { get; set; }
        public decimal PriceChange24h { get; set; }
        public decimal CurrentPosition { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadConfiguration();
        await LoadTradingPairs();
        await LoadBotStatus();
        await LoadPortfolioHoldings();
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();
        _isLoading = false;
        
        // Set up auto-refresh timer (every 10 seconds)
        _refreshTimer = new Timer(async _ => await RefreshData(), null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private async Task LoadConfiguration()
    {
        try
        {
            _configuration = await ConfigurationService.GetConfiguration();
        }
        catch
        {
            _configuration = new TradingConfiguration();
        }
    }

    private async Task LoadTradingPairs()
    {
        await Task.Delay(1);
        
        // Create trading pairs based on actual portfolio holdings when available
        if (_portfolioHoldings.Any() && !string.IsNullOrEmpty(_configuration.ApiKey))
        {
            _tradingPairs = _portfolioHoldings.Where(h => h.Symbol != "USDT").Select(holding => new TradingPair
            {
                Symbol = $"{holding.Symbol}USDT",
                BaseAsset = holding.Symbol,
                QuoteAsset = "USDT",
                IsEnabled = true,
                CurrentPrice = holding.Price,
                PriceChange24h = holding.Change24h,
                CurrentPosition = holding.Amount
            }).ToList();
        }
        else
        {
            // Fallback to static pairs
            _tradingPairs = new List<TradingPair>
            {
                new TradingPair 
                { 
                    Symbol = "BTCUSDT", 
                    BaseAsset = "BTC", 
                    QuoteAsset = "USDT", 
                    IsEnabled = true, 
                    CurrentPrice = 43250.75m, 
                    PriceChange24h = 2.45m,
                    CurrentPosition = 0.0025m
                },
                new TradingPair 
                { 
                    Symbol = "ETHUSDT", 
                    BaseAsset = "ETH", 
                    QuoteAsset = "USDT", 
                    IsEnabled = true, 
                    CurrentPrice = 2650.30m, 
                    PriceChange24h = -1.20m,
                    CurrentPosition = 0.15m
                },
                new TradingPair 
                { 
                    Symbol = "ADAUSDT", 
                    BaseAsset = "ADA", 
                    QuoteAsset = "USDT", 
                    IsEnabled = false, 
                    CurrentPrice = 0.485m, 
                    PriceChange24h = 3.80m,
                    CurrentPosition = 0
                }
            };
        }
    }

    private async Task LoadPortfolioHoldings()
    {
        try
        {
            // Use real data if API credentials are configured, otherwise use mock data
            if (!string.IsNullOrEmpty(_configuration.ApiKey) && !string.IsNullOrEmpty(_configuration.ApiSecret))
            {
                _portfolioHoldings = await RealCryptoDataService.GetPortfolioHoldingsAsync();
                
                // If real data returns empty but we have API credentials, it might be unavailable
                if (!_portfolioHoldings.Any())
                {
                    // Portfolio is empty or data unavailable - use empty list to show appropriate message
                    _portfolioHoldings = new List<TradeNetics.WebApp.Data.PortfolioHolding>();
                }
            }
            else
            {
                _portfolioHoldings = await MockCryptoDataService.GetPortfolioHoldingsAsync();
            }
            
            _totalPortfolioValue = _portfolioHoldings.Sum(h => h.UsdValue);
            
            // Calculate daily P&L based on portfolio changes
            if (_portfolioHoldings.Any())
            {
                var avgChange = _portfolioHoldings.Average(h => h.Change24h);
                _dailyPnL = avgChange;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading portfolio: {ex.Message}");
            // Fallback to mock data on error
            try
            {
                _portfolioHoldings = await MockCryptoDataService.GetPortfolioHoldingsAsync();
                _totalPortfolioValue = _portfolioHoldings.Sum(h => h.UsdValue);
                if (_portfolioHoldings.Any())
                {
                    var avgChange = _portfolioHoldings.Average(h => h.Change24h);
                    _dailyPnL = avgChange;
                }
            }
            catch
            {
                _portfolioHoldings = new List<TradeNetics.WebApp.Data.PortfolioHolding>();
                _totalPortfolioValue = 0;
                _dailyPnL = 0;
            }
        }
    }

    private async Task LoadBotStatus()
    {
        try
        {
            // Use real bot status if API credentials are configured
            if (!string.IsNullOrEmpty(_configuration.ApiKey) && !string.IsNullOrEmpty(_configuration.ApiSecret))
            {
                _botStatus = await RealCryptoDataService.GetBotStatusAsync();
            }
            else
            {
                _botStatus = await StatusService.GetStatusAsync();
            }
        }
        catch
        {
            _botStatus = await StatusService.GetStatusAsync();
        }
    }

    private async Task ToggleBotStatus()
    {
        _isTogglingBot = true;
        
        try
        {
            if (_botStatus?.IsRunning == true)
            {
                await StatusService.StopBot();
            }
            else
            {
                await StatusService.StartBot();
            }
            
            await LoadBotStatus();
        }
        finally
        {
            _isTogglingBot = false;
        }
    }

    private async Task RestartBot()
    {
        _isTogglingBot = true;
        
        try
        {
            await StatusService.RestartBot();
            await LoadBotStatus();
        }
        finally
        {
            _isTogglingBot = false;
        }
    }

    private async Task SaveConfiguration()
    {
        try
        {
            await ConfigurationService.SaveConfiguration(_configuration);
            // Reload portfolio data with new API credentials
            await LoadPortfolioHoldings();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving configuration: {ex.Message}");
        }
    }

    private async Task TogglePairStatus(TradingPair pair)
    {
        pair.IsEnabled = !pair.IsEnabled;
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();
        await Task.Delay(100);
    }

    private async Task RemovePair(TradingPair pair)
    {
        _tradingPairs.Remove(pair);
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();
        await Task.Delay(100);
    }

    private void ShowAddCryptoModal()
    {
        _showAddCryptoModal = true;
        _newCryptoSymbol = string.Empty;
        _enableNewCrypto = true;
    }

    private void HideAddCryptoModal()
    {
        _showAddCryptoModal = false;
    }

    private async Task AddNewCrypto()
    {
        if (string.IsNullOrEmpty(_newCryptoSymbol))
            return;

        var symbol = _newCryptoSymbol.ToUpper().Trim();
        
        if (_tradingPairs.Any(p => p.Symbol == symbol))
        {
            return;
        }

        var baseAsset = symbol.Replace("USDT", "");
        var quoteAsset = "USDT";

        var newPair = new TradingPair
        {
            Symbol = symbol,
            BaseAsset = baseAsset,
            QuoteAsset = quoteAsset,
            IsEnabled = _enableNewCrypto,
            CurrentPrice = 0,
            PriceChange24h = 0,
            CurrentPosition = 0
        };

        _tradingPairs.Add(newPair);
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();

        HideAddCryptoModal();
        await Task.Delay(100);
    }

    private async Task OnPaperTradingChanged(ChangeEventArgs e)
    {
        _configuration.PaperTradingMode = (bool)e.Value!;
        await SaveConfiguration();
    }

    private async Task OnTradingEnabledChanged(ChangeEventArgs e)
    {
        _configuration.TradingEnabled = (bool)e.Value!;
        await SaveConfiguration();
    }

    private string GetChartColor(string symbol)
    {
        return symbol switch
        {
            "BTC" => "#f7931a",
            "ETH" => "#627eea",
            "ADA" => "#0033ad",
            "LTC" => "#bfbbbb",
            _ => "#6c757d"
        };
    }

    private async Task RefreshData()
    {
        try
        {
            await LoadPortfolioHoldings();
            await LoadBotStatus();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}