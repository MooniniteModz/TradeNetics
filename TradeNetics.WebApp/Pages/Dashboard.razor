@page "/"
@page "/dashboard"
@using TradeNetics.WebApp.Data
@inject IConfigurationService ConfigurationService
@inject TradingBotStatusService StatusService

<PageTitle>TradeNetics Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-primary mb-3">
                <i class="oi oi-graph"></i> TradeNetics Dashboard
            </h1>
            <p class="lead text-muted">AI-Powered Cryptocurrency Trading Bot</p>
        </div>
    </div>

    <!-- Status Cards Row -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Bot Status</h6>
                            <h4 class="mb-0 @(_botStatus?.IsRunning == true ? "text-success" : "text-danger")">
                                @(_botStatus?.IsRunning == true ? "Running" : "Stopped")
                            </h4>
                        </div>
                        <div class="display-6 @(_botStatus?.IsRunning == true ? "text-success" : "text-danger")">
                            <i class="oi @(_botStatus?.IsRunning == true ? "oi-play-circle" : "oi-media-stop")"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Active Pairs</h6>
                            <h4 class="mb-0 text-info">@_activePairs.Count</h4>
                        </div>
                        <div class="display-6 text-info">
                            <i class="oi oi-layers"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Total Balance</h6>
                            <h4 class="mb-0 text-warning">$@(_totalBalance.ToString("F2"))</h4>
                        </div>
                        <div class="display-6 text-warning">
                            <i class="oi oi-dollar"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h6 class="card-title text-muted mb-1">Today's P&L</h6>
                            <h4 class="mb-0 @(_dailyPnL >= 0 ? "text-success" : "text-danger")">
                                @(_dailyPnL >= 0 ? "+" : "")@_dailyPnL.ToString("F2")%
                            </h4>
                        </div>
                        <div class="display-6 @(_dailyPnL >= 0 ? "text-success" : "text-danger")">
                            <i class="oi @(_dailyPnL >= 0 ? "oi-arrow-top" : "oi-arrow-bottom")"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Row -->
    <div class="row">
        <!-- Bot Controls -->
        <div class="col-md-4 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="oi oi-cog"></i> Bot Controls</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn @(_botStatus?.IsRunning == true ? "btn-danger" : "btn-success") btn-lg" 
                                @onclick="ToggleBotStatus" disabled="@_isTogglingBot">
                            @if (_isTogglingBot)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="oi @(_botStatus?.IsRunning == true ? "oi-media-stop" : "oi-play-circle")"></i>
                            @(_botStatus?.IsRunning == true ? "Stop Trading Bot" : "Start Trading Bot")
                        </button>
                        
                        <button class="btn btn-outline-warning" @onclick="RestartBot" disabled="@_isTogglingBot">
                            <i class="oi oi-reload"></i> Restart Bot
                        </button>
                    </div>

                    <hr />

                    <h6 class="text-muted mb-3">Quick Settings</h6>
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="paperTradingSwitch" 
                               checked="@_configuration.PaperTradingMode" 
                               @onchange="@((ChangeEventArgs e) => OnPaperTradingChanged(e))">
                        <label class="form-check-label" for="paperTradingSwitch">
                            Paper Trading Mode
                        </label>
                    </div>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="tradingEnabledSwitch" 
                               checked="@_configuration.TradingEnabled" 
                               @onchange="@((ChangeEventArgs e) => OnTradingEnabledChanged(e))">
                        <label class="form-check-label" for="tradingEnabledSwitch">
                            Trading Enabled
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cryptocurrency Management -->
        <div class="col-md-8 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="oi oi-layers"></i> Cryptocurrency Management</h5>
                    <button class="btn btn-light btn-sm" @onclick="ShowAddCryptoModal">
                        <i class="oi oi-plus"></i> Add Crypto
                    </button>
                </div>
                <div class="card-body">
                    @if (_tradingPairs.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Symbol</th>
                                        <th>Status</th>
                                        <th>Current Price</th>
                                        <th>24h Change</th>
                                        <th>Position</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pair in _tradingPairs)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@pair.Symbol</strong>
                                                <br />
                                                <small class="text-muted">@pair.BaseAsset/@pair.QuoteAsset</small>
                                            </td>
                                            <td>
                                                <span class="badge @(pair.IsEnabled ? "bg-success" : "bg-secondary")">
                                                    @(pair.IsEnabled ? "Active" : "Disabled")
                                                </span>
                                            </td>
                                            <td>
                                                $@pair.CurrentPrice.ToString("F4")
                                            </td>
                                            <td>
                                                <span class="@(pair.PriceChange24h >= 0 ? "text-success" : "text-danger")">
                                                    @(pair.PriceChange24h >= 0 ? "+" : "")@pair.PriceChange24h.ToString("F2")%
                                                </span>
                                            </td>
                                            <td>
                                                @if (pair.CurrentPosition > 0)
                                                {
                                                    <span class="text-success">@pair.CurrentPosition.ToString("F6")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">None</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm @(pair.IsEnabled ? "btn-outline-warning" : "btn-outline-success")" 
                                                            @onclick="() => TogglePairStatus(pair)">
                                                        <i class="oi @(pair.IsEnabled ? "oi-media-pause" : "oi-media-play")"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemovePair(pair)">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <div class="display-6 text-muted mb-3">
                                <i class="oi oi-info"></i>
                            </div>
                            <h5 class="text-muted">No cryptocurrencies configured</h5>
                            <p class="text-muted">Add your first trading pair to get started</p>
                            <button class="btn btn-primary" @onclick="ShowAddCryptoModal">
                                <i class="oi oi-plus"></i> Add Cryptocurrency
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- API Configuration Row -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0"><i class="oi oi-key"></i> API Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="apiKey" class="form-label">Binance API Key</label>
                                <div class="input-group">
                                    <input type="@(_showApiKey ? "text" : "password")" 
                                           id="apiKey" 
                                           class="form-control" 
                                           @bind="_configuration.ApiKey" 
                                           placeholder="Enter your Binance API key" />
                                    <button class="btn btn-outline-secondary" type="button" 
                                            @onclick="() => _showApiKey = !_showApiKey">
                                        <i class="oi @(_showApiKey ? "oi-eye" : "oi-eye-closed")"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="apiSecret" class="form-label">Binance API Secret</label>
                                <div class="input-group">
                                    <input type="@(_showApiSecret ? "text" : "password")" 
                                           id="apiSecret" 
                                           class="form-control" 
                                           @bind="_configuration.ApiSecret" 
                                           placeholder="Enter your Binance API secret" />
                                    <button class="btn btn-outline-secondary" type="button" 
                                            @onclick="() => _showApiSecret = !_showApiSecret">
                                        <i class="oi @(_showApiSecret ? "oi-eye" : "oi-eye-closed")"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="form-text">
                            <i class="oi oi-shield text-warning"></i>
                            Your API keys are stored securely and never transmitted in plain text.
                        </div>
                        <button class="btn btn-primary" @onclick="SaveConfiguration">
                            <i class="oi oi-check"></i> Save API Configuration
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Crypto Modal -->
@if (_showAddCryptoModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Cryptocurrency</h5>
                    <button type="button" class="btn-close" @onclick="HideAddCryptoModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="newCryptoSymbol" class="form-label">Trading Pair Symbol</label>
                        <input type="text" id="newCryptoSymbol" class="form-control" 
                               @bind="_newCryptoSymbol" 
                               placeholder="e.g., BTCUSDT, ETHUSDT, ADAUSDT" 
                               style="text-transform: uppercase" />
                        <div class="form-text">Enter the full trading pair symbol (e.g., BTCUSDT)</div>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="enableNewCrypto" @bind="_enableNewCrypto">
                        <label class="form-check-label" for="enableNewCrypto">
                            Enable trading for this pair immediately
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddCryptoModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddNewCrypto" disabled="@string.IsNullOrEmpty(_newCryptoSymbol)">
                        <i class="oi oi-plus"></i> Add Cryptocurrency
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private TradingConfiguration _configuration = new();
    private TradeNetics.WebApp.Data.TradingBotStatus? _botStatus;
    private List<TradingPair> _tradingPairs = new();
    private List<TradingPair> _activePairs = new();
    private decimal _totalBalance = 10000.50m;
    private decimal _dailyPnL = 2.35m;
    private bool _isTogglingBot = false;
    private bool _showApiKey = false;
    private bool _showApiSecret = false;
    private bool _showAddCryptoModal = false;
    private string _newCryptoSymbol = string.Empty;
    private bool _enableNewCrypto = true;

    public class TradingPair
    {
        public string Symbol { get; set; } = string.Empty;
        public string BaseAsset { get; set; } = string.Empty;
        public string QuoteAsset { get; set; } = string.Empty;
        public bool IsEnabled { get; set; }
        public decimal CurrentPrice { get; set; }
        public decimal PriceChange24h { get; set; }
        public decimal CurrentPosition { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadConfiguration();
        await LoadTradingPairs();
        await LoadBotStatus();
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();
    }

    private async Task LoadConfiguration()
    {
        try
        {
            _configuration = await ConfigurationService.GetConfiguration();
        }
        catch
        {
            _configuration = new TradingConfiguration();
        }
    }

    private async Task LoadTradingPairs()
    {
        // Mock data - replace with actual service calls
        await Task.Delay(1); // Simulate async operation
        
        _tradingPairs = new List<TradingPair>
        {
            new TradingPair 
            { 
                Symbol = "BTCUSDT", 
                BaseAsset = "BTC", 
                QuoteAsset = "USDT", 
                IsEnabled = true, 
                CurrentPrice = 43250.75m, 
                PriceChange24h = 2.45m,
                CurrentPosition = 0.0025m
            },
            new TradingPair 
            { 
                Symbol = "ETHUSDT", 
                BaseAsset = "ETH", 
                QuoteAsset = "USDT", 
                IsEnabled = true, 
                CurrentPrice = 2650.30m, 
                PriceChange24h = -1.20m,
                CurrentPosition = 0.15m
            },
            new TradingPair 
            { 
                Symbol = "ADAUSDT", 
                BaseAsset = "ADA", 
                QuoteAsset = "USDT", 
                IsEnabled = false, 
                CurrentPrice = 0.485m, 
                PriceChange24h = 3.80m,
                CurrentPosition = 0
            }
        };
    }

    private async Task LoadBotStatus()
    {
        _botStatus = await StatusService.GetStatusAsync();
    }

    private async Task ToggleBotStatus()
    {
        _isTogglingBot = true;
        
        try
        {
            if (_botStatus?.IsRunning == true)
            {
                await StatusService.StopBot();
            }
            else
            {
                await StatusService.StartBot();
            }
            
            await LoadBotStatus();
        }
        finally
        {
            _isTogglingBot = false;
        }
    }

    private async Task RestartBot()
    {
        _isTogglingBot = true;
        
        try
        {
            await StatusService.RestartBot();
            await LoadBotStatus();
        }
        finally
        {
            _isTogglingBot = false;
        }
    }

    private async Task SaveConfiguration()
    {
        try
        {
            await ConfigurationService.SaveConfiguration(_configuration);
        }
        catch (Exception ex)
        {
            // Handle error - could show toast notification
            Console.WriteLine($"Error saving configuration: {ex.Message}");
        }
    }

    private async Task TogglePairStatus(TradingPair pair)
    {
        pair.IsEnabled = !pair.IsEnabled;
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();
        
        // TODO: Save to backend service
        await Task.Delay(100); // Simulate API call
    }

    private async Task RemovePair(TradingPair pair)
    {
        _tradingPairs.Remove(pair);
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();
        
        // TODO: Save to backend service
        await Task.Delay(100); // Simulate API call
    }

    private void ShowAddCryptoModal()
    {
        _showAddCryptoModal = true;
        _newCryptoSymbol = string.Empty;
        _enableNewCrypto = true;
    }

    private void HideAddCryptoModal()
    {
        _showAddCryptoModal = false;
    }

    private async Task AddNewCrypto()
    {
        if (string.IsNullOrEmpty(_newCryptoSymbol))
            return;

        var symbol = _newCryptoSymbol.ToUpper().Trim();
        
        // Basic validation
        if (_tradingPairs.Any(p => p.Symbol == symbol))
        {
            // TODO: Show error message - pair already exists
            return;
        }

        // Parse base and quote assets (assuming USDT pairs for now)
        var baseAsset = symbol.Replace("USDT", "");
        var quoteAsset = "USDT";

        var newPair = new TradingPair
        {
            Symbol = symbol,
            BaseAsset = baseAsset,
            QuoteAsset = quoteAsset,
            IsEnabled = _enableNewCrypto,
            CurrentPrice = 0, // TODO: Fetch real price
            PriceChange24h = 0,
            CurrentPosition = 0
        };

        _tradingPairs.Add(newPair);
        _activePairs = _tradingPairs.Where(p => p.IsEnabled).ToList();

        HideAddCryptoModal();
        
        // TODO: Save to backend service
        await Task.Delay(100); // Simulate API call
    }

    private async Task OnPaperTradingChanged(ChangeEventArgs e)
    {
        _configuration.PaperTradingMode = (bool)e.Value!;
        await SaveConfiguration();
    }

    private async Task OnTradingEnabledChanged(ChangeEventArgs e)
    {
        _configuration.TradingEnabled = (bool)e.Value!;
        await SaveConfiguration();
    }
}