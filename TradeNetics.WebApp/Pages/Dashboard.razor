@page "/"
@page "/dashboard"
@using TradeNetics.WebApp.Data
@using TradeNetics.Shared.Models
@inject IConfigurationService ConfigurationService
@inject ICryptoDataService CryptoDataService
@implements IDisposable

<PageTitle>TradeNetics Dashboard</PageTitle>

<!-- GitHub-style Page Header -->
<div class="d-flex justify-content-between align-items-center mb-6">
    <div>
        <h1 style="font-size: 24px; font-weight: 600; margin: 0 0 8px; color: var(--color-fg-default);">Dashboard</h1>
        <p style="margin: 0; color: var(--color-fg-muted); font-size: 16px;">
            Overview of your trading performance and portfolio status
        </p>
    </div>
    <div class="d-flex gap-2">
        <button class="github-btn">
            <i class="fe fe-download github-btn-icon"></i>
            Export Data
        </button>
        <button class="github-btn github-btn-primary">
            <i class="fe fe-plus github-btn-icon"></i>
            New Trade
        </button>
    </div>
</div>

<!-- GitHub-style Stats Grid -->
<div class="github-stats-grid">
    <div class="github-stat-card">
        <div class="github-stat-icon">
            <i class="fe fe-dollar-sign"></i>
        </div>
        <div class="github-stat-content">
            <h3>$@(_totalPortfolioValue.ToString("N0"))</h3>
            <p>Total Portfolio Value</p>
        </div>
    </div>
    
    <div class="github-stat-card">
        <div class="github-stat-icon">
            <i class="fe fe-trending-up"></i>
        </div>
        <div class="github-stat-content">
            <h3 class="@(_dailyPnL >= 0 ? "text-success" : "text-danger")">
                @(_dailyPnL >= 0 ? "+" : "")@(_dailyPnL.ToString("N2"))%
            </h3>
            <p>24h Performance</p>
        </div>
    </div>
    
    <div class="github-stat-card">
        <div class="github-stat-icon">
            <i class="fe fe-activity"></i>
        </div>
        <div class="github-stat-content">
            <h3>@(_botStatus?.TotalTrades ?? 0)</h3>
            <p>Total Trades</p>
        </div>
    </div>
    
    <div class="github-stat-card">
        <div class="github-stat-icon">
            <i class="fe fe-cpu"></i>
        </div>
        <div class="github-stat-content">
            <h3>
                @if (_botStatus?.IsRunning == true)
                {
                    <span class="github-label github-label-success">Active</span>
                }
                else
                {
                    <span class="github-label github-label-danger">Inactive</span>
                }
            </h3>
            <p>Bot Status</p>
        </div>
    </div>
</div>

<!-- GitHub-style Cards Layout -->
<div style="display: grid; grid-template-columns: 2fr 1fr; gap: var(--space-6); margin-bottom: var(--space-6);">
    <!-- Portfolio Holdings Card -->
    <div class="github-card">
        <div class="github-card-header">
            <h2 class="github-card-title">Portfolio Holdings</h2>
            <div class="d-flex gap-2">
                <button class="github-btn github-btn-sm">
                    <i class="fe fe-filter github-btn-icon"></i>
                    Filter
                </button>
                <button class="github-btn github-btn-sm">
                    <i class="fe fe-refresh-cw github-btn-icon"></i>
                    Refresh
                </button>
            </div>
        </div>
        <div class="github-card-body" style="padding: 0;">
            @if (_portfolioHoldings.Any())
            {
                <table class="github-table">
                    <thead>
                        <tr>
                            <th>Asset</th>
                            <th>Amount</th>
                            <th>Value</th>
                            <th>24h Change</th>
                            <th>Allocation</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var holding in _portfolioHoldings.Take(8))
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center gap-3">
                                        <span class="crypto-symbol">@GetCryptoSymbol(holding.Symbol)</span>
                                        <div>
                                            <strong>@holding.Symbol</strong>
                                            <div class="text-muted" style="font-size: 12px;">@holding.Name</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="crypto-price">@holding.Quantity.ToString("N4")</div>
                                        <div class="text-muted" style="font-size: 12px;">$@holding.CurrentPrice.ToString("N2")</div>
                                    </div>
                                </td>
                                <td>
                                    <strong>$@holding.MarketValue.ToString("N2")</strong>
                                </td>
                                <td>
                                    <span class="@(holding.Change24h >= 0 ? "github-label github-label-success" : "github-label github-label-danger")">
                                        @(holding.Change24h >= 0 ? "+" : "")@holding.Change24h.ToString("N2")%
                                    </span>
                                </td>
                                <td>
                                    <div style="width: 60px; background: var(--color-canvas-inset); height: 6px; border-radius: 3px; position: relative;">
                                        <div style="width: @(holding.AllocationPercentage)%; background: var(--color-accent-fg); height: 100%; border-radius: 3px;"></div>
                                    </div>
                                    <div style="font-size: 12px; margin-top: 4px;">@holding.AllocationPercentage.ToString("N1")%</div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div style="text-align: center; padding: var(--space-8); color: var(--color-fg-muted);">
                    <i class="fe fe-pie-chart" style="font-size: 48px; opacity: 0.3; margin-bottom: var(--space-4);"></i>
                    <h3 style="margin: 0 0 var(--space-2); color: var(--color-fg-muted);">No portfolio data</h3>
                    <p style="margin: 0;">Your portfolio holdings will appear here once trades are executed.</p>
                </div>
            }
        </div>
    </div>

    <!-- Trading Bot Status Card -->
    <div class="github-card">
        <div class="github-card-header">
            <h2 class="github-card-title">Trading Bot</h2>
            <button class="github-btn github-btn-sm">
                <i class="fe fe-settings github-btn-icon"></i>
            </button>
        </div>
        <div class="github-card-body">
            @if (_botStatus != null)
            {
                <div style="text-align: center; margin-bottom: var(--space-6);">
                    <div style="width: 64px; height: 64px; border-radius: 50%; background: @(_botStatus.IsRunning ? "var(--color-success-fg)" : "var(--color-danger-fg)"); display: flex; align-items: center; justify-content: center; margin: 0 auto var(--space-3); color: white; font-size: 24px;">
                        <i class="fe @(_botStatus.IsRunning ? "fe-play" : "fe-pause")"></i>
                    </div>
                    <h3 style="margin: 0 0 var(--space-1); font-size: 18px;">@(_botStatus.IsRunning ? "Bot Active" : "Bot Stopped")</h3>
                    <p style="margin: 0; color: var(--color-fg-muted);">Strategy: @_botStatus.CurrentStrategy</p>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: var(--space-4); margin-bottom: var(--space-6);">
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: 600; color: var(--color-accent-fg); margin-bottom: var(--space-1);">@_botStatus.DailyTrades</div>
                        <div style="font-size: 12px; color: var(--color-fg-muted); text-transform: uppercase; letter-spacing: 0.5px;">Trades Today</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: 600; margin-bottom: var(--space-1);" class="@(_botStatus.TotalPnL >= 0 ? "text-success" : "text-danger")">
                            $@_botStatus.TotalPnL.ToString("N0")
                        </div>
                        <div style="font-size: 12px; color: var(--color-fg-muted); text-transform: uppercase; letter-spacing: 0.5px;">Total P&L</div>
                    </div>
                </div>

                <div style="margin-bottom: var(--space-4);">
                    <div style="display: flex; justify-content: space-between; margin-bottom: var(--space-2);">
                        <span style="color: var(--color-fg-muted); font-size: 14px;">Model Confidence</span>
                        <span style="font-weight: 600; font-size: 14px;">@((_botStatus.ModelConfidence * 100).ToString("N1"))%</span>
                    </div>
                    <div style="width: 100%; background: var(--color-canvas-inset); height: 8px; border-radius: 4px;">
                        <div style="width: @((_botStatus.ModelConfidence * 100).ToString("N1"))%; background: var(--color-accent-fg); height: 100%; border-radius: 4px;"></div>
                    </div>
                </div>

                <div style="margin-bottom: var(--space-4);">
                    <div style="display: flex; justify-content: space-between; margin-bottom: var(--space-2);">
                        <span style="color: var(--color-fg-muted); font-size: 14px;">Available Balance</span>
                        <span style="font-weight: 600; font-size: 14px;">$@_botStatus.AvailableBalance.ToString("N2")</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span style="color: var(--color-fg-muted); font-size: 14px;">Last Trade</span>
                        <span style="font-size: 14px;">@_botStatus.LastTradeTime.ToString("MMM dd, HH:mm")</span>
                    </div>
                </div>

                <div style="display: flex; flex-direction: column; gap: var(--space-2);">
                    <button class="github-btn @(_botStatus.IsRunning ? "" : "github-btn-primary")" style="justify-content: center;">
                        <i class="fe @(_botStatus.IsRunning ? "fe-pause" : "fe-play") github-btn-icon"></i>
                        @(_botStatus.IsRunning ? "Stop Bot" : "Start Bot")
                    </button>
                    <button class="github-btn" style="justify-content: center;">
                        <i class="fe fe-settings github-btn-icon"></i>
                        Configure
                    </button>
                </div>
            }
            else
            {
                <div style="text-align: center; padding: var(--space-6);">
                    <div style="width: 32px; height: 32px; border: 2px solid var(--color-accent-fg); border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite; margin: 0 auto var(--space-3);"></div>
                    <p style="margin: 0; color: var(--color-fg-muted);">Loading bot status...</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Recent Activity Card -->
<div class="github-card">
    <div class="github-card-header">
        <h2 class="github-card-title">Recent Trading Activity</h2>
        <a href="/tradehistory" class="github-btn github-btn-sm">
            View all
            <i class="fe fe-arrow-right github-btn-icon"></i>
        </a>
    </div>
    <div class="github-card-body" style="padding: 0;">
        <table class="github-table">
            <thead>
                <tr>
                    <th>Time</th>
                    <th>Pair</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Price</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="color: var(--color-fg-muted); font-size: 12px;">2 min ago</td>
                    <td>
                        <span class="crypto-symbol">₿</span>
                        <strong>BTC/USDT</strong>
                    </td>
                    <td><span class="github-label github-label-success">Buy</span></td>
                    <td>0.0234</td>
                    <td class="crypto-price">$43,250.00</td>
                    <td><span class="github-label github-label-success">Filled</span></td>
                </tr>
                <tr>
                    <td style="color: var(--color-fg-muted); font-size: 12px;">15 min ago</td>
                    <td>
                        <span class="crypto-symbol">Ξ</span>
                        <strong>ETH/USDT</strong>
                    </td>
                    <td><span class="github-label github-label-danger">Sell</span></td>
                    <td>1.5678</td>
                    <td class="crypto-price">$2,580.75</td>
                    <td><span class="github-label github-label-success">Filled</span></td>
                </tr>
                <tr>
                    <td style="color: var(--color-fg-muted); font-size: 12px;">1 hour ago</td>
                    <td>
                        <span class="crypto-symbol">◎</span>
                        <strong>SOL/USDT</strong>
                    </td>
                    <td><span class="github-label github-label-success">Buy</span></td>
                    <td>12.345</td>
                    <td class="crypto-price">$98.45</td>
                    <td><span class="github-label github-label-warning">Pending</span></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

@code {
    private TradingConfiguration _configuration = new();
    private TradingBotStatus? _botStatus;
    private List<PortfolioHolding> _portfolioHoldings = new();
    private decimal _totalPortfolioValue = 0m;
    private decimal _dailyPnL = 0m;
    private bool _isLoading = false;
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        // Set up auto-refresh every 30 seconds
        _refreshTimer = new Timer(async _ => await InvokeAsync(LoadData), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            // Load configuration
            _configuration = await ConfigurationService.GetConfiguration();

            // Load bot status
            _botStatus = await CryptoDataService.GetBotStatusAsync();

            // Load portfolio holdings
            _portfolioHoldings = await CryptoDataService.GetPortfolioHoldingsAsync();
            
            // Calculate totals
            _totalPortfolioValue = _portfolioHoldings.Sum(h => h.MarketValue);
            
            if (_portfolioHoldings.Any())
            {
                var weightedChange = _portfolioHoldings
                    .Where(h => h.MarketValue > 0)
                    .Sum(h => h.Change24h * (h.MarketValue / _totalPortfolioValue));
                _dailyPnL = weightedChange;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetCryptoSymbol(string symbol)
    {
        return symbol.Replace("USDT", "").ToLower() switch
        {
            "btc" => "₿",
            "eth" => "Ξ",
            "sol" => "◎",
            "ada" => "₳",
            "dot" => "●",
            "link" => "⧉",
            "bnb" => "⬢",
            "xrp" => "✕",
            "matic" => "▲",
            "avax" => "🔺",
            _ => "●"
        };
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}