@page "/trader"
@using TradeNetics.WebApp.Data
@inject ICryptoDataService CryptoDataService
@inject TradingBotStatusService StatusService
@inject TradeHistoryService TradeHistoryService
@implements IDisposable

<PageTitle>Trader - TradeNetics</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-primary mb-3">
                <i class="oi oi-target"></i> Trading Bot Dashboard
            </h1>
            <p class="lead text-muted">Monitor bot performance and trading analytics</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Bot Status Cards -->
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="display-4 mb-3">
                            @if (botStatus?.IsRunning == true)
                            {
                                <i class="oi oi-media-play text-success"></i>
                            }
                            else
                            {
                                <i class="oi oi-media-pause text-danger"></i>
                            }
                        </div>
                        <h5 class="card-title">Bot Status</h5>
                        <p class="card-text">
                            <span class="badge @(botStatus?.IsRunning == true ? "bg-success" : "bg-danger") fs-6">
                                @(botStatus?.IsRunning == true ? "RUNNING" : "STOPPED")
                            </span>
                        </p>
                        <button class="btn @(botStatus?.IsRunning == true ? "btn-danger" : "btn-success") btn-sm">
                            @(botStatus?.IsRunning == true ? "Stop Bot" : "Start Bot")
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="display-4 mb-3 text-primary">
                            <i class="oi oi-dollar"></i>
                        </div>
                        <h5 class="card-title">Total P&L</h5>
                        <h3 class="@(botStatus?.TotalProfit >= 0 ? "text-success" : "text-danger")">
                            @(botStatus?.TotalProfit >= 0 ? "+" : "")@botStatus?.TotalProfit.ToString("F2")
                        </h3>
                        <small class="text-muted">USD</small>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="display-4 mb-3 text-info">
                            <i class="oi oi-list"></i>
                        </div>
                        <h5 class="card-title">Total Trades</h5>
                        <h3 class="text-dark">@botStatus?.TotalTrades</h3>
                        <small class="text-muted">Executed</small>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="display-4 mb-3 text-warning">
                            <i class="oi oi-clock"></i>
                        </div>
                        <h5 class="card-title">Last Update</h5>
                        <p class="card-text">
                            @if (botStatus?.LastUpdate != null)
                            {
                                <small>@botStatus.LastUpdate.Value.ToString("MMM dd, HH:mm")</small>
                            }
                            else
                            {
                                <small class="text-muted">Never</small>
                            }
                        </p>
                        <small class="text-muted">@botStatus?.Status</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analytics Charts Row -->
        <div class="row mb-4">
            <div class="col-lg-8 mb-3">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="oi oi-graph"></i> Portfolio Performance
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container" style="height: 300px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border: 2px dashed #dee2e6; display: flex; align-items: center; justify-content: center; border-radius: 8px;">
                            <div class="text-center text-muted">
                                <i class="oi oi-graph" style="font-size: 48px;"></i>
                                <h5 class="mt-3">Portfolio Performance Chart</h5>
                                <p>Real-time portfolio value tracking</p>
                                <small>Chart library integration pending</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">
                            <i class="oi oi-pie-chart"></i> Asset Allocation
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container" style="height: 300px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border: 2px dashed #dee2e6; display: flex; align-items: center; justify-content: center; border-radius: 8px;">
                            <div class="text-center text-muted">
                                <i class="oi oi-pie-chart" style="font-size: 48px;"></i>
                                <h5 class="mt-3">Asset Distribution</h5>
                                <p>Portfolio allocation breakdown</p>
                                <small>Pie chart integration pending</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Trading Activity Section -->
        <div class="row mb-4">
            <div class="col-lg-6 mb-3">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">
                            <i class="oi oi-bar-chart"></i> Trading Signals
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (recentTrades != null && recentTrades.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Symbol</th>
                                            <th>Signal</th>
                                            <th>Price</th>
                                            <th>Time</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var trade in recentTrades.Take(5))
                                        {
                                            <tr>
                                                <td><strong>@trade.Symbol</strong></td>
                                                <td>
                                                    <span class="badge @(trade.Side == "BUY" ? "bg-success" : "bg-danger")">
                                                        @trade.Side
                                                    </span>
                                                </td>
                                                <td>$@trade.Price.ToString("N2")</td>
                                                <td><small>@trade.Timestamp.ToString("HH:mm")</small></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <i class="oi oi-info" style="font-size: 24px;"></i>
                                <p class="mt-2">No recent trading signals</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-lg-6 mb-3">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="oi oi-cog"></i> Bot Configuration
                        </h5>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-6">Trading Mode:</dt>
                            <dd class="col-sm-6">
                                <span class="badge bg-secondary">Paper Trading</span>
                            </dd>
                            
                            <dt class="col-sm-6">Risk Level:</dt>
                            <dd class="col-sm-6">
                                <span class="badge bg-warning text-dark">Medium</span>
                            </dd>
                            
                            <dt class="col-sm-6">Max Position:</dt>
                            <dd class="col-sm-6">2% of portfolio</dd>
                            
                            <dt class="col-sm-6">Stop Loss:</dt>
                            <dd class="col-sm-6">5%</dd>
                            
                            <dt class="col-sm-6">Trading Pairs:</dt>
                            <dd class="col-sm-6">
                                <small>BTC/USDT, ETH/USDT, ADA/USDT</small>
                            </dd>
                        </dl>
                        <div class="d-grid">
                            <a href="/configuration" class="btn btn-outline-primary btn-sm">
                                Configure Settings
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Performance Table -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">
                            <i class="oi oi-spreadsheet"></i> Recent Trading Activity
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (recentTrades != null && recentTrades.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Time</th>
                                            <th>Symbol</th>
                                            <th>Side</th>
                                            <th>Amount</th>
                                            <th>Price</th>
                                            <th>Total</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var trade in recentTrades)
                                        {
                                            <tr>
                                                <td>@trade.Timestamp.ToString("MMM dd, HH:mm:ss")</td>
                                                <td><strong>@trade.Symbol</strong></td>
                                                <td>
                                                    <span class="badge @(trade.Side == "BUY" ? "bg-success" : "bg-danger")">
                                                        @trade.Side
                                                    </span>
                                                </td>
                                                <td>@trade.Amount.ToString("F6")</td>
                                                <td>$@trade.Price.ToString("N2")</td>
                                                <td>$@trade.Total.ToString("N2")</td>
                                                <td>
                                                    <span class="badge bg-success">Completed</span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-5">
                                <i class="oi oi-document" style="font-size: 48px;"></i>
                                <h5 class="mt-3">No Trading Activity</h5>
                                <p>Bot trading activity will appear here once started</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private TradingBotStatus? botStatus;
    private List<TradeData>? recentTrades;
    private bool isLoading = true;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        StartAutoRefresh();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Load bot status and recent trades
            var statusTask = CryptoDataService.GetBotStatusAsync();
            var tradesTask = CryptoDataService.GetRecentTradesAsync();
            
            await Task.WhenAll(statusTask, tradesTask);
            
            botStatus = await statusTask;
            recentTrades = await tradesTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trader data: {ex.Message}");
            botStatus = new TradingBotStatus 
            { 
                IsRunning = false, 
                Status = "Error loading status",
                TotalProfit = 0,
                TotalTrades = 0,
                LastUpdate = DateTime.Now
            };
            recentTrades = new List<TradeData>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartAutoRefresh()
    {
        refreshTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadData();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}